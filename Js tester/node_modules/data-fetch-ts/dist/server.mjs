"use server";
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/server.ts
var fetchData = (_0) => __async(void 0, [_0], function* ({ endpoint, method = "GET", token, body }) {
  const headers = {
    "Content-Type": "application/json"
  };
  if (token) {
    headers["Authorization"] = `Bearer ${token}`;
  }
  const fetchOptions = {
    method,
    headers
  };
  if (body) {
    fetchOptions.body = JSON.stringify(body);
  }
  const response = yield fetch(endpoint, fetchOptions);
  return response.json();
});
var server_default = fetchData;
export {
  server_default as default
};
//# sourceMappingURL=server.mjs.map